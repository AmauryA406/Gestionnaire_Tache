/**
 * Exercice 2 : Classes et Classes de Donn√©es
 *
 * Objectifs :
 * - Cr√©er une classe et une classe de donn√©es
 * - Utiliser des propri√©t√©s immutables (val) et mutables (var)
 * - Instancier des objets et acc√©der √† leurs propri√©t√©s
 * - Travailler avec MutableList
 */

/**
 * Classe de donn√©es Task repr√©sentant une t√¢che
 *
 * @param id Identifiant unique de la t√¢che
 * @param description Description de la t√¢che
 * @param isDone Statut de completion de la t√¢che (par d√©faut false)
 */
data class Task(
    val id: Int,
    val description: String,
    var isDone: Boolean = false
) {
    /**
     * Fonction pour marquer la t√¢che comme termin√©e
     */
    fun markAsDone() {
        isDone = true
    }

    /**
     * Fonction pour marquer la t√¢che comme non termin√©e
     */
    fun markAsUndone() {
        isDone = false
    }

    /**
     * Retourne une repr√©sentation format√©e de la t√¢che
     */
    fun getFormattedStatus(): String {
        val status = if (isDone) "‚úÖ Termin√©e" else "‚è≥ En cours"
        return "[$id] $description - $status"
    }
}

/**
 * Classe TaskManager pour g√©rer une collection de t√¢ches
 */
class TaskManager {
    // Liste mutable priv√©e pour stocker les t√¢ches
    private val tasks: MutableList<Task> = mutableListOf()

    // Compteur pour g√©n√©rer des IDs uniques
    private var nextId: Int = 1

    /**
     * Ajoute une nouvelle t√¢che avec la description donn√©e
     *
     * @param description Description de la nouvelle t√¢che
     * @return La t√¢che cr√©√©e
     */
    fun addTask(description: String): Task {
        val newTask = Task(nextId, description)
        tasks.add(newTask)
        nextId++
        println("‚úÖ T√¢che ajout√©e : ${newTask.getFormattedStatus()}")
        return newTask
    }

    /**
     * Affiche toutes les t√¢ches avec leur ID et statut
     */
    fun listTasks() {
        if (tasks.isEmpty()) {
            println("üìù Aucune t√¢che disponible.")
            return
        }

        println("\nüìã === LISTE DES T√ÇCHES ===")
        tasks.forEach { task ->
            println("   ${task.getFormattedStatus()}")
        }
        println("üìä Total : ${tasks.size} t√¢che(s)\n")
    }

    /**
     * Retourne le nombre total de t√¢ches
     */
    fun getTaskCount(): Int = tasks.size

    /**
     * Retourne le nombre de t√¢ches termin√©es
     */
    fun getCompletedTaskCount(): Int = tasks.count { it.isDone }

    /**
     * Retourne le nombre de t√¢ches en cours
     */
    fun getPendingTaskCount(): Int = tasks.count { !it.isDone }

    /**
     * Trouve une t√¢che par son ID
     *
     * @param id L'ID de la t√¢che √† trouver
     * @return La t√¢che trouv√©e ou null si non trouv√©e
     */
    fun findTaskById(id: Int): Task? {
        return tasks.find { it.id == id }
    }

    /**
     * Retourne une copie en lecture seule de la liste des t√¢ches
     */
    fun getAllTasks(): List<Task> = tasks.toList()

    /**
     * Affiche un r√©sum√© des statistiques
     */
    fun displaySummary() {
        println("\nüìä === R√âSUM√â ===")
        println("üìù Total des t√¢ches : ${getTaskCount()}")
        println("‚úÖ T√¢ches termin√©es : ${getCompletedTaskCount()}")
        println("‚è≥ T√¢ches en cours : ${getPendingTaskCount()}")

        if (getTaskCount() > 0) {
            val completionRate = (getCompletedTaskCount().toDouble() / getTaskCount() * 100).toInt()
            println("üìà Taux de completion : $completionRate%")
        }
        println()
    }
}

/**
 * Fonction de d√©monstration des classes de donn√©es
 */
fun demonstrateDataClass() {
    println("=== D√âMONSTRATION CLASSE DE DONN√âES ===")

    // Cr√©ation de t√¢ches
    val task1 = Task(1, "Apprendre Kotlin")
    val task2 = Task(2, "Faire les exercices", true)
    val task3 = Task(3, "R√©viser pour l'examen")

    println("üìù T√¢ches cr√©√©es :")
    println("   ${task1.getFormattedStatus()}")
    println("   ${task2.getFormattedStatus()}")
    println("   ${task3.getFormattedStatus()}")

    // Modification d'une t√¢che
    println("\nüîÑ Marquage de la t√¢che 1 comme termin√©e...")
    task1.markAsDone()
    println("   ${task1.getFormattedStatus()}")

    // D√©monstration des fonctions g√©n√©r√©es automatiquement par data class
    println("\nüîç Fonctions automatiques des data class :")
    println("   task1.toString() = $task1")
    println("   task1 == Task(1, \"Apprendre Kotlin\", true) = ${task1 == Task(1, "Apprendre Kotlin", true)}")

    // Copy avec modification
    val task1Copy = task1.copy(description = "Ma√Ætriser Kotlin")
    println("   Copie modifi√©e : $task1Copy")

    println()
}

/**
 * Fonction de d√©monstration du TaskManager
 */
fun demonstrateTaskManager() {
    println("=== D√âMONSTRATION TASK MANAGER ===")

    // Cr√©ation du gestionnaire
    val taskManager = TaskManager()

    // Ajout de t√¢ches
    println("‚ûï Ajout de t√¢ches...")
    taskManager.addTask("Lire la documentation Kotlin")
    taskManager.addTask("Impl√©menter les exercices")
    taskManager.addTask("Tester le code")
    taskManager.addTask("R√©diger le rapport")

    // Affichage de la liste
    taskManager.listTasks()

    // Affichage du r√©sum√©
    taskManager.displaySummary()

    // Test de recherche
    println("üîç Recherche de la t√¢che ID 2...")
    val foundTask = taskManager.findTaskById(2)
    if (foundTask != null) {
        println("   Trouv√©e : ${foundTask.getFormattedStatus()}")
        foundTask.markAsDone()
        println("   Marqu√©e comme termin√©e : ${foundTask.getFormattedStatus()}")
    } else {
        println("   ‚ùå T√¢che non trouv√©e")
    }

    // Affichage final
    taskManager.listTasks()
    taskManager.displaySummary()
}

/**
 * Fonction principale pour tester toutes les fonctionnalit√©s
 */
fun main() {
    println("=== EXERCICE 2 : CLASSES ET CLASSES DE DONN√âES ===\n")

    // 1. D√©monstration des classes de donn√©es
    demonstrateDataClass()

    println("\n" + "=".repeat(50) + "\n")

    // 2. D√©monstration du TaskManager
    demonstrateTaskManager()

    println("‚úÖ Exercice 2 termin√© !")
}
/**
 * Exercice 3 : Collections, Boucles et Menu Interactif
 * Version autonome avec toutes les classes n√©cessaires
 *
 * Objectifs :
 * - Utiliser MutableList et List
 * - Travailler avec les boucles (for, while) et les conditions (if, when)
 * - Cr√©er un menu console interactif
 * - Compl√©ter TaskManager avec markTaskDone et removeTask
 */

/**
 * Classe de donn√©es Task pour l'Exercice 3
 */
data class TaskEx3(
    val id: Int,
    val description: String,
    var isDone: Boolean = false
) {
    fun markAsDone() {
        isDone = true
    }

    fun markAsUndone() {
        isDone = false
    }

    fun getFormattedStatus(): String {
        val status = if (isDone) "‚úÖ Termin√©e" else "‚è≥ En cours"
        return "[$id] $description - $status"
    }
}

/**
 * Classe TaskManager compl√®te pour l'Exercice 3
 */
class TaskManagerEx3 {
    private val tasks: MutableList<TaskEx3> = mutableListOf()
    private var nextId: Int = 1

    /**
     * Ajoute une nouvelle t√¢che
     */
    fun addTask(description: String): TaskEx3 {
        val newTask = TaskEx3(nextId, description)
        tasks.add(newTask)
        nextId++
        return newTask
    }

    /**
     * Affiche toutes les t√¢ches avec leur ID et statut
     */
    fun listTasks() {
        if (tasks.isEmpty()) {
            println("üìù Aucune t√¢che disponible.")
            return
        }

        println("\nüìã === LISTE DES T√ÇCHES ===")
        tasks.forEachIndexed { index, task ->
            println("   ${index + 1}. ${task.getFormattedStatus()}")
        }
        println("üìä Total : ${tasks.size} t√¢che(s)")

        // Affichage par cat√©gorie
        val completedTasks = tasks.filter { it.isDone }
        val pendingTasks = tasks.filter { !it.isDone }

        if (completedTasks.isNotEmpty()) {
            println("\n‚úÖ T√¢ches termin√©es (${completedTasks.size}) :")
            completedTasks.forEach { task ->
                println("   ‚Ä¢ ${task.description}")
            }
        }

        if (pendingTasks.isNotEmpty()) {
            println("\n‚è≥ T√¢ches en cours (${pendingTasks.size}) :")
            pendingTasks.forEach { task ->
                println("   ‚Ä¢ ${task.description}")
            }
        }
        println()
    }

    /**
     * Marque une t√¢che comme termin√©e par son ID
     */
    fun markTaskDone(id: Int): Boolean {
        val task = findTaskById(id)
        return if (task != null) {
            if (task.isDone) {
                println("‚ÑπÔ∏è La t√¢che '$id' est d√©j√† termin√©e.")
                false
            } else {
                task.markAsDone()
                println("‚úÖ T√¢che '$id' marqu√©e comme termin√©e : ${task.description}")
                true
            }
        } else {
            println("‚ùå Aucune t√¢che trouv√©e avec l'ID '$id'.")
            false
        }
    }

    /**
     * Supprime une t√¢che par son ID
     */
    fun removeTask(id: Int): Boolean {
        val task = findTaskById(id)
        return if (task != null) {
            tasks.remove(task)
            println("üóëÔ∏è T√¢che '$id' supprim√©e : ${task.description}")
            true
        } else {
            println("‚ùå Aucune t√¢che trouv√©e avec l'ID '$id'.")
            false
        }
    }

    /**
     * Recherche une t√¢che par mot-cl√© dans la description
     */
    fun searchTasks(keyword: String): List<TaskEx3> {
        if (keyword.isBlank()) {
            println("‚ùå Le mot-cl√© de recherche ne peut pas √™tre vide.")
            return emptyList()
        }

        val foundTasks = tasks.filter {
            it.description.contains(keyword, ignoreCase = true)
        }

        if (foundTasks.isEmpty()) {
            println("üîç Aucune t√¢che trouv√©e contenant '$keyword'.")
        } else {
            println("\nüîç T√¢ches trouv√©es contenant '$keyword' (${foundTasks.size}) :")
            foundTasks.forEach { task ->
                println("   ${task.getFormattedStatus()}")
            }
            println()
        }

        return foundTasks
    }

    /**
     * Change le statut d'une t√¢che (termin√©e ‚Üî en cours)
     */
    fun toggleTaskStatus(id: Int): Boolean {
        val task = findTaskById(id)
        return if (task != null) {
            if (task.isDone) {
                task.markAsUndone()
                println("‚è≥ T√¢che '$id' marqu√©e comme en cours : ${task.description}")
            } else {
                task.markAsDone()
                println("‚úÖ T√¢che '$id' marqu√©e comme termin√©e : ${task.description}")
            }
            true
        } else {
            println("‚ùå Aucune t√¢che trouv√©e avec l'ID '$id'.")
            false
        }
    }

    /**
     * Supprime toutes les t√¢ches termin√©es
     */
    fun clearCompletedTasks(): Int {
        val completedTasks = tasks.filter { it.isDone }
        val removedCount = completedTasks.size

        if (removedCount == 0) {
            println("‚ÑπÔ∏è Aucune t√¢che termin√©e √† supprimer.")
            return 0
        }

        tasks.removeAll(completedTasks)
        println("üßπ $removedCount t√¢che(s) termin√©e(s) supprim√©e(s).")
        return removedCount
    }

    // M√©thodes utilitaires
    fun findTaskById(id: Int): TaskEx3? = tasks.find { it.id == id }
    fun getTaskCount(): Int = tasks.size
    fun getCompletedTaskCount(): Int = tasks.count { it.isDone }
    fun getPendingTaskCount(): Int = tasks.count { !it.isDone }
    fun getAllTasks(): List<TaskEx3> = tasks.toList()

    /**
     * Affiche les statistiques d√©taill√©es
     */
    fun displayDetailedStats() {
        val total = getTaskCount()
        val completed = getCompletedTaskCount()
        val pending = getPendingTaskCount()

        println("\nüìä === STATISTIQUES D√âTAILL√âES ===")
        println("üìù Total des t√¢ches : $total")
        println("‚úÖ T√¢ches termin√©es : $completed")
        println("‚è≥ T√¢ches en cours : $pending")

        if (total > 0) {
            val completionRate = (completed.toDouble() / total * 100).toInt()
            println("üìà Taux de completion : $completionRate%")

            val progressBar = generateProgressBar(completionRate)
            println("üìä Progr√®s : $progressBar")
        }

        if (tasks.isNotEmpty()) {
            val longestTask = tasks.maxByOrNull { it.description.length }
            val shortestTask = tasks.minByOrNull { it.description.length }

            println("\nüìè Analyse des descriptions :")
            println("   Plus longue : ${longestTask?.description?.take(30)}${if (longestTask?.description?.length ?: 0 > 30) "..." else ""}")
            println("   Plus courte : ${shortestTask?.description}")
        }
        println()
    }

    private fun generateProgressBar(percentage: Int): String {
        val barLength = 20
        val filledLength = (percentage * barLength / 100)
        val filled = "‚ñà".repeat(filledLength)
        val empty = "‚ñë".repeat(barLength - filledLength)
        return "[$filled$empty] $percentage%"
    }
}

/**
 * Classe pour g√©rer l'interface utilisateur du menu
 */
class TaskMenuUI(private val taskManager: TaskManagerEx3) {

    /**
     * Affiche le menu principal
     */
    fun displayMenu() {
        println("\n" + "=".repeat(50))
        println("üìã GESTIONNAIRE DE T√ÇCHES - MENU PRINCIPAL")
        println("=".repeat(50))
        println("1. ‚ûï Ajouter une t√¢che")
        println("2. üìã Lister toutes les t√¢ches")
        println("3. ‚úÖ Marquer une t√¢che comme termin√©e")
        println("4. üóëÔ∏è  Supprimer une t√¢che")
        println("5. üîç Rechercher des t√¢ches")
        println("6. üîÑ Changer le statut d'une t√¢che")
        println("7. üßπ Supprimer toutes les t√¢ches termin√©es")
        println("8. üìä Afficher les statistiques")
        println("9. üÜò Aide")
        println("0. üö™ Quitter")
        println("=".repeat(50))
        print("üëâ Choisissez une option (0-9) : ")
    }

    /**
     * G√®re l'ajout d'une t√¢che
     */
    fun handleAddTask() {
        println("\n‚ûï === AJOUTER UNE T√ÇCHE ===")
        print("üìù Entrez la description de la t√¢che : ")
        val description = readLine()?.trim()

        when {
            description.isNullOrBlank() -> {
                println("‚ùå La description ne peut pas √™tre vide.")
            }
            description.length > 200 -> {
                println("‚ùå La description est trop longue (maximum 200 caract√®res).")
            }
            else -> {
                val task = taskManager.addTask(description)
                println("‚úÖ T√¢che ajout√©e avec succ√®s !")
                println("   ${task.getFormattedStatus()}")
            }
        }
    }

    /**
     * G√®re le marquage d'une t√¢che comme termin√©e
     */
    fun handleMarkTaskDone() {
        println("\n‚úÖ === MARQUER COMME TERMIN√âE ===")
        if (taskManager.getTaskCount() == 0) {
            println("‚ùå Aucune t√¢che disponible.")
            return
        }

        taskManager.listTasks()
        print("üëâ Entrez l'ID de la t√¢che √† marquer comme termin√©e : ")
        val id = readLine()?.toIntOrNull()

        if (id != null) {
            taskManager.markTaskDone(id)
        } else {
            println("‚ùå ID invalide. Veuillez entrer un nombre entier.")
        }
    }

    /**
     * G√®re la suppression d'une t√¢che
     */
    fun handleRemoveTask() {
        println("\nüóëÔ∏è === SUPPRIMER UNE T√ÇCHE ===")
        if (taskManager.getTaskCount() == 0) {
            println("‚ùå Aucune t√¢che disponible.")
            return
        }

        taskManager.listTasks()
        print("üëâ Entrez l'ID de la t√¢che √† supprimer : ")
        val id = readLine()?.toIntOrNull()

        if (id != null) {
            print("‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer cette t√¢che ? (o/n) : ")
            val confirmation = readLine()?.lowercase()

            if (confirmation == "o" || confirmation == "oui") {
                taskManager.removeTask(id)
            } else {
                println("‚ùå Suppression annul√©e.")
            }
        } else {
            println("‚ùå ID invalide. Veuillez entrer un nombre entier.")
        }
    }

    /**
     * G√®re la recherche de t√¢ches
     */
    fun handleSearchTasks() {
        println("\nüîç === RECHERCHER DES T√ÇCHES ===")
        if (taskManager.getTaskCount() == 0) {
            println("‚ùå Aucune t√¢che disponible.")
            return
        }

        print("üëâ Entrez un mot-cl√© √† rechercher : ")
        val keyword = readLine()?.trim()

        if (!keyword.isNullOrBlank()) {
            taskManager.searchTasks(keyword)
        } else {
            println("‚ùå Le mot-cl√© ne peut pas √™tre vide.")
        }
    }

    /**
     * G√®re le changement de statut d'une t√¢che
     */
    fun handleToggleTaskStatus() {
        println("\nüîÑ === CHANGER LE STATUT D'UNE T√ÇCHE ===")
        if (taskManager.getTaskCount() == 0) {
            println("‚ùå Aucune t√¢che disponible.")
            return
        }

        taskManager.listTasks()
        print("üëâ Entrez l'ID de la t√¢che √† modifier : ")
        val id = readLine()?.toIntOrNull()

        if (id != null) {
            taskManager.toggleTaskStatus(id)
        } else {
            println("‚ùå ID invalide. Veuillez entrer un nombre entier.")
        }
    }

    /**
     * Affiche l'aide
     */
    fun displayHelp() {
        println("\nüÜò === AIDE ===")
        println("üìã Comment utiliser le gestionnaire de t√¢ches :")
        println()
        println("‚ûï Ajouter une t√¢che :")
        println("   ‚Ä¢ Choisissez l'option 1")
        println("   ‚Ä¢ Tapez la description de votre t√¢che")
        println("   ‚Ä¢ La t√¢che sera automatiquement ajout√©e avec un ID unique")
        println()
        println("üìã Lister les t√¢ches :")
        println("   ‚Ä¢ Choisissez l'option 2")
        println("   ‚Ä¢ Toutes vos t√¢ches s'afficheront avec leur statut")
        println()
        println("‚úÖ Marquer comme termin√©e :")
        println("   ‚Ä¢ Choisissez l'option 3")
        println("   ‚Ä¢ Entrez l'ID de la t√¢che √† terminer")
        println()
        println("üóëÔ∏è Supprimer une t√¢che :")
        println("   ‚Ä¢ Choisissez l'option 4")
        println("   ‚Ä¢ Entrez l'ID de la t√¢che √† supprimer")
        println("   ‚Ä¢ Confirmez la suppression")
        println()
        println("üîç Rechercher :")
        println("   ‚Ä¢ Choisissez l'option 5")
        println("   ‚Ä¢ Entrez un mot-cl√© pr√©sent dans la description")
        println()
        println("üí° Conseils :")
        println("   ‚Ä¢ Les IDs sont attribu√©s automatiquement (1, 2, 3...)")
        println("   ‚Ä¢ Vous pouvez modifier le statut d'une t√¢che avec l'option 6")
        println("   ‚Ä¢ Les statistiques (option 8) vous donnent un aper√ßu global")
        println()
    }

    /**
     * Boucle principale du menu
     */
    fun runMenu() {
        println("üéâ Bienvenue dans le Gestionnaire de T√¢ches !")
        println("üìù Commencez par ajouter quelques t√¢ches...")

        // Boucle principale avec while
        var running = true
        while (running) {
            displayMenu()

            when (val choice = readLine()?.toIntOrNull()) {
                1 -> handleAddTask()
                2 -> taskManager.listTasks()
                3 -> handleMarkTaskDone()
                4 -> handleRemoveTask()
                5 -> handleSearchTasks()
                6 -> handleToggleTaskStatus()
                7 -> taskManager.clearCompletedTasks()
                8 -> taskManager.displayDetailedStats()
                9 -> displayHelp()
                0 -> {
                    println("\nüëã Merci d'avoir utilis√© le Gestionnaire de T√¢ches !")
                    println("üìä R√©sum√© final :")
                    taskManager.displayDetailedStats()
                    running = false
                }
                else -> {
                    println("‚ùå Option invalide. Veuillez choisir un nombre entre 0 et 9.")
                }
            }

            // Petite pause pour la lisibilit√©
            if (running) {
                print("\nAppuyez sur Entr√©e pour continuer...")
                readLine()
            }
        }
    }
}

/**
 * Fonction pour cr√©er des t√¢ches d'exemple
 */
fun createSampleTasks(taskManager: TaskManagerEx3) {
    println("üì¶ Cr√©ation de t√¢ches d'exemple...")

    val sampleTasks = listOf(
        "Apprendre les bases de Kotlin",
        "Impl√©menter les classes Task et TaskManager",
        "Cr√©er le menu interactif",
        "Tester toutes les fonctionnalit√©s",
        "R√©diger la documentation",
        "Optimiser les performances",
        "Ajouter la gestion d'erreurs"
    )

    // Ajouter les t√¢ches d'exemple
    sampleTasks.forEach { description ->
        taskManager.addTask(description)
    }

    // Marquer quelques t√¢ches comme termin√©es
    taskManager.markTaskDone(1) // Apprendre les bases
    taskManager.markTaskDone(2) // Impl√©menter les classes
    taskManager.markTaskDone(4) // Tester

    println("‚úÖ ${sampleTasks.size} t√¢ches d'exemple cr√©√©es !")
    println("üéØ ${taskManager.getCompletedTaskCount()} t√¢ches d√©j√† termin√©es pour la d√©monstration.")
}

/**
 * Fonction principale
 */
fun main() {
    println("=== EXERCICE 3 : GESTIONNAIRE DE T√ÇCHES INTERACTIF ===\n")

    // Cr√©er le gestionnaire de t√¢ches
    val taskManager = TaskManagerEx3()

    // Demander si l'utilisateur veut des t√¢ches d'exemple
    print("ü§î Voulez-vous cr√©er des t√¢ches d'exemple pour tester ? (o/n) : ")
    val createSamples = readLine()?.lowercase()

    if (createSamples == "o" || createSamples == "oui") {
        createSampleTasks(taskManager)
        println()
    }

    // Cr√©er et lancer l'interface utilisateur
    val menuUI = TaskMenuUI(taskManager)
    menuUI.runMenu()

    println("\n‚úÖ Exercice 3 termin√© ! Au revoir ! üëã")
}